---
attack_technique: T1018
display_name: Remote System Discovery

atomic_tests:
- name: Remote System Discovery - net
  auto_generated_guid: daeaa5eb-9734-42c6-b6a4-344a567d5f4d
  description: |
    Identify remote systems with net.exe.

    Upon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      net view /domain
      net view

- name: Remote System Discovery - net group Domain Computers
  auto_generated_guid: 204c5c2a-0d87-409d-b0a2-11456bbbcc0e
  description: |
    Identify remote systems with net.exe querying the Active Directory Domain Computers group.

    Upon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the "Domain Computers" group. Output will be via stdout.

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      net group "Domain Computers" /domain

- name: Remote System Discovery - nltest
  auto_generated_guid: 319ba173-42ee-4acc-a32d-287c8ffa704f
  description: |
    Identify domain controllers for specified domain.

    Upon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.

  supported_platforms:
    - windows

  input_arguments:
    target_domain:
      description: Domain to query for domain controllers
      type: String
      default: domain.local

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      nltest.exe /dclist:#{target_domain}

- name: Remote System Discovery - ping sweep
  auto_generated_guid: 08a8bddb-aa74-4131-bef5-da4762e0402c
  description: |
    Identify remote systems via ping sweep.

    Upon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      for /l %i in (1,1,254) do ping -n 1 -w 100 192.168.1.%i

- name: Remote System Discovery - arp
  auto_generated_guid: 0f0ef5ba-51ff-451e-88ed-da87ce744cfc
  description: |
    Identify remote systems via arp. 

    Upon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      arp -a

- name: Remote System Discovery - arp nix
  auto_generated_guid: b78a903b-b8a0-40d7-a53c-b770dcd5f9a0
  description: |
    Identify remote systems via arp.

    Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.

  supported_platforms:
    - linux
    - macos
  dependency_executor_name: sh
  dependencies:
    - description: |
        Check if arp command exists on the machine
      prereq_command: |
        if [ -x "$(command -v arp)" ]; then exit 0; else exit 1;
      get_prereq_command: |
        echo "Install arp on the machine."; exit 1;

  executor:
    name: sh
    elevation_required: false
    command: |
      arp -a | grep -v '^?'

- name: Remote System Discovery - sweep
  auto_generated_guid: 5b2a5904-5b04-4e05-ac30-7443c8e5788a
  description: |
    Identify remote systems via ping sweep.

    Upon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active. 

  supported_platforms:
    - linux
    - macos
  input_arguments:
    subnet:
      description: Subnet used for ping sweep.
      type: string
      default: 192.168.1
    start_host:
      description: Subnet used for ping sweep.
      type: string
      default: 1
    stop_host:
      description: Subnet used for ping sweep.
      type: string
      default: 254
  executor:
    name: sh
    elevation_required: false
    command: |
      for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo "#{subnet}.$ip UP" || : ; done
      
- name: Remote System Discovery - nslookup
  auto_generated_guid: 0a73bc97-0136-491d-a12f-6dbbb553a58a
  description: |
    Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.

    Upon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout. 

  supported_platforms:
    - windows
  executor:
    name: powershell
    elevation_required: true
    command: |
      $localip = ((ipconfig | findstr [0-9].\.)[0]).Split()[-1]
      $pieces = $localip.split(".")
      $firstOctet = $pieces[0]
      $secondOctet = $pieces[1]
      $thirdOctet = $pieces[2]
      foreach ($ip in 1..255 | % { "$firstOctet.$secondOctet.$thirdOctet.$_" } ) {cmd.exe /c nslookup $ip}
